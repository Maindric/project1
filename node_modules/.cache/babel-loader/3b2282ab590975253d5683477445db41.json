{"ast":null,"code":"var _jsxFileName = \"/home/maindric/web/Supra_Coders/project1/my-app/src/components/DeckBuilder.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext, useRef } from 'react';\nimport ContextInformation from \"./ContextInformation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DeckBuilder() {\n  _s();\n\n  const context = useContext(ContextInformation);\n  const searchText = useRef(null);\n  const [searchResults, setSearchResults] = useState([]);\n  useEffect(() => {\n    console.log(searchResults);\n  }, [searchResults]);\n\n  const submitSearch = e => {\n    e.preventDefault();\n\n    async function performSearch() {\n      return await fetch(`https://api.scryfall.com/cards/search?q=${searchText.current.value}`).then(result => result.json()).then(json => setSearchResults(json.data));\n    }\n\n    performSearch();\n  };\n\n  const addToDeck = (e, index) => {\n    e.preventDefault();\n    const newCard = searchResults[index];\n    const searchForCard = context.deck.filter((card, deckIndex) => {\n      if (card.id === newCard.id) {\n        const newDeck = [...context.deck];\n        newDeck[deckIndex].count++;\n        context.setDeck(newDeck);\n        return true;\n      }\n\n      return false;\n    });\n\n    if (searchForCard.length === 0) {\n      newCard.count = 1;\n      context.setDeck([...context.deck, newCard]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"deck-builder\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: searchText,\n        id: \"search-text\",\n        name: \"search-text\",\n        placeholder: \"Search Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        id: \"search-button\",\n        name: \"search-button\",\n        onClick: submitSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), context.deck.map(card => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [card.name, \" \", card.type, \" x\", card.count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 39\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DeckBuilder, \"TvC4IkMIIyymjj8vJuZPKrk8q9c=\");\n\n_c = DeckBuilder;\nexport default DeckBuilder;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckBuilder\");","map":{"version":3,"sources":["/home/maindric/web/Supra_Coders/project1/my-app/src/components/DeckBuilder.js"],"names":["useState","useEffect","useContext","useRef","ContextInformation","DeckBuilder","context","searchText","searchResults","setSearchResults","console","log","submitSearch","e","preventDefault","performSearch","fetch","current","value","then","result","json","data","addToDeck","index","newCard","searchForCard","deck","filter","card","deckIndex","id","newDeck","count","setDeck","length","map","name","type"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,EAA0CC,MAA1C,QAAwD,OAAxD;AAEA,OAAOC,kBAAP,MAA+B,sBAA/B;;;AAEA,SAASC,WAAT,GAAuB;AAAA;;AACnB,QAAMC,OAAO,GAAGJ,UAAU,CAACE,kBAAD,CAA1B;AACA,QAAMG,UAAU,GAAGJ,MAAM,CAAC,IAAD,CAAzB;AACA,QAAM,CAAEK,aAAF,EAAiBC,gBAAjB,IAAsCT,QAAQ,CAAC,EAAD,CAApD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,OAAO,CAACC,GAAR,CAAYH,aAAZ;AACH,GAFQ,EAEN,CAACA,aAAD,CAFM,CAAT;;AAIA,QAAMI,YAAY,GAAIC,CAAD,IAAO;AACxBA,IAAAA,CAAC,CAACC,cAAF;;AACA,mBAAeC,aAAf,GAA+B;AAC3B,aAAO,MAAMC,KAAK,CAAE,2CAA0CT,UAAU,CAACU,OAAX,CAAmBC,KAAM,EAArE,CAAL,CACAC,IADA,CACKC,MAAM,IAAIA,MAAM,CAACC,IAAP,EADf,EAEAF,IAFA,CAEKE,IAAI,IAAIZ,gBAAgB,CAACY,IAAI,CAACC,IAAN,CAF7B,CAAb;AAGH;;AAEDP,IAAAA,aAAa;AAChB,GATD;;AAWA,QAAMQ,SAAS,GAAG,CAACV,CAAD,EAAIW,KAAJ,KAAc;AAC5BX,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMW,OAAO,GAAGjB,aAAa,CAACgB,KAAD,CAA7B;AACA,UAAME,aAAa,GAAGpB,OAAO,CAACqB,IAAR,CAAaC,MAAb,CAAoB,CAACC,IAAD,EAAOC,SAAP,KAAqB;AAC3D,UAAGD,IAAI,CAACE,EAAL,KAAYN,OAAO,CAACM,EAAvB,EAA2B;AACvB,cAAMC,OAAO,GAAG,CAAC,GAAG1B,OAAO,CAACqB,IAAZ,CAAhB;AACAK,QAAAA,OAAO,CAACF,SAAD,CAAP,CAAmBG,KAAnB;AACA3B,QAAAA,OAAO,CAAC4B,OAAR,CAAgBF,OAAhB;AACA,eAAO,IAAP;AACH;;AACD,aAAO,KAAP;AACH,KARqB,CAAtB;;AASA,QAAGN,aAAa,CAACS,MAAd,KAAyB,CAA5B,EAA+B;AAC3BV,MAAAA,OAAO,CAACQ,KAAR,GAAgB,CAAhB;AACA3B,MAAAA,OAAO,CAAC4B,OAAR,CAAgB,CAAC,GAAG5B,OAAO,CAACqB,IAAZ,EAAkBF,OAAlB,CAAhB;AACH;AACJ,GAhBD;;AAkBA,sBACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACI;AAAA,8BACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,GAAG,EAAElB,UAAxB;AAAoC,QAAA,EAAE,EAAC,aAAvC;AAAqD,QAAA,IAAI,EAAC,aAA1D;AAAwE,QAAA,WAAW,EAAC;AAApF;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,EAAE,EAAC,eAAxB;AAAwC,QAAA,IAAI,EAAC,eAA7C;AAA6D,QAAA,OAAO,EAAEK;AAAtE;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAKKN,OAAO,CAACqB,IAAR,CAAaS,GAAb,CAAiBP,IAAI,iBAAI;AAAA,iBAAIA,IAAI,CAACQ,IAAT,OAAgBR,IAAI,CAACS,IAArB,QAA6BT,IAAI,CAACI,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,YAAzB,CALL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;GA/CQ5B,W;;KAAAA,W;AAiDT,eAAeA,WAAf","sourcesContent":["import { useState, useEffect, useContext, useRef } from 'react';\n\nimport ContextInformation from \"./ContextInformation\";\n\nfunction DeckBuilder() {\n    const context = useContext(ContextInformation);\n    const searchText = useRef(null);\n    const [ searchResults, setSearchResults ] = useState([]);\n\n    useEffect(() => {\n        console.log(searchResults);\n    }, [searchResults])\n\n    const submitSearch = (e) => {\n        e.preventDefault();\n        async function performSearch() {\n            return await fetch(`https://api.scryfall.com/cards/search?q=${searchText.current.value}`)\n                        .then(result => result.json())\n                        .then(json => setSearchResults(json.data));\n        }\n\n        performSearch();\n    }\n\n    const addToDeck = (e, index) => {\n        e.preventDefault();\n        const newCard = searchResults[index];\n        const searchForCard = context.deck.filter((card, deckIndex) => {\n            if(card.id === newCard.id) {\n                const newDeck = [...context.deck];\n                newDeck[deckIndex].count++;\n                context.setDeck(newDeck);\n                return true;\n            }\n            return false;\n        });\n        if(searchForCard.length === 0) {\n            newCard.count = 1;\n            context.setDeck([...context.deck, newCard]);\n        }   \n    }\n\n    return(\n        <div className=\"deck-builder\">\n            <form>\n                <input type=\"text\" ref={searchText} id=\"search-text\" name=\"search-text\" placeholder=\"Search Text\" />\n                <input type=\"submit\" id=\"search-button\" name=\"search-button\" onClick={submitSearch} />\n            </form>\n            {context.deck.map(card => <p>{card.name} {card.type} x{card.count}</p>)}\n        </div>\n    )\n}\n\nexport default DeckBuilder;"]},"metadata":{},"sourceType":"module"}