{"ast":null,"code":"var _jsxFileName = \"/home/maindric/web/Supra_Coders/project1/my-app/src/components/DeckBuilder.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext, useRef } from 'react';\nimport ContextInformation from \"./ContextInformation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DeckBuilder() {\n  _s();\n\n  const context = useContext(ContextInformation);\n  const searchText = useRef(null);\n  const [searchResults, setSearchResults] = useState([]);\n  useEffect(() => {\n    console.log(searchResults);\n  }, [searchResults]);\n\n  const submitSearch = e => {\n    e.preventDefault();\n\n    async function performSearch() {\n      return await fetch(`https://api.scryfall.com/cards/search?q=${searchText.current.value}`).then(result => result.json()).then(json => setSearchResults(json.data));\n    }\n\n    performSearch();\n  };\n\n  const addToDeck = (e, index) => {\n    e.preventDefault();\n    context.setDeck(searchResult[index]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"deck-builder\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: searchText,\n        id: \"search-text\",\n        name: \"search-text\",\n        placeholder: \"Search Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        id: \"search-button\",\n        name: \"search-button\",\n        onClick: submitSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), searchResults.map((card, index) => {\n      const imageUrl = card.image_uris ? card.image_uris.small : \"https://imgs.smoothradio.com/images/191589?crop=16_9&width=660&relax=1&signature=Rz93ikqcAz7BcX6SKiEC94zJnqo=\";\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: imageUrl,\n          alt: card.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [card.name, \" \", card.type, \" \", card.cmc]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: card.oracle_text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => addToDeck(e, index),\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 25\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DeckBuilder, \"TvC4IkMIIyymjj8vJuZPKrk8q9c=\");\n\n_c = DeckBuilder;\nexport default DeckBuilder;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckBuilder\");","map":{"version":3,"sources":["/home/maindric/web/Supra_Coders/project1/my-app/src/components/DeckBuilder.js"],"names":["useState","useEffect","useContext","useRef","ContextInformation","DeckBuilder","context","searchText","searchResults","setSearchResults","console","log","submitSearch","e","preventDefault","performSearch","fetch","current","value","then","result","json","data","addToDeck","index","setDeck","searchResult","map","card","imageUrl","image_uris","small","name","type","cmc","oracle_text"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,EAA0CC,MAA1C,QAAwD,OAAxD;AAEA,OAAOC,kBAAP,MAA+B,sBAA/B;;;AAEA,SAASC,WAAT,GAAuB;AAAA;;AACnB,QAAMC,OAAO,GAAGJ,UAAU,CAACE,kBAAD,CAA1B;AACA,QAAMG,UAAU,GAAGJ,MAAM,CAAC,IAAD,CAAzB;AACA,QAAM,CAAEK,aAAF,EAAiBC,gBAAjB,IAAsCT,QAAQ,CAAC,EAAD,CAApD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,OAAO,CAACC,GAAR,CAAYH,aAAZ;AACH,GAFQ,EAEN,CAACA,aAAD,CAFM,CAAT;;AAIA,QAAMI,YAAY,GAAIC,CAAD,IAAO;AACxBA,IAAAA,CAAC,CAACC,cAAF;;AACA,mBAAeC,aAAf,GAA+B;AAC3B,aAAO,MAAMC,KAAK,CAAE,2CAA0CT,UAAU,CAACU,OAAX,CAAmBC,KAAM,EAArE,CAAL,CACAC,IADA,CACKC,MAAM,IAAIA,MAAM,CAACC,IAAP,EADf,EAEAF,IAFA,CAEKE,IAAI,IAAIZ,gBAAgB,CAACY,IAAI,CAACC,IAAN,CAF7B,CAAb;AAGH;;AAEDP,IAAAA,aAAa;AAChB,GATD;;AAWA,QAAMQ,SAAS,GAAG,CAACV,CAAD,EAAIW,KAAJ,KAAc;AAC5BX,IAAAA,CAAC,CAACC,cAAF;AACAR,IAAAA,OAAO,CAACmB,OAAR,CAAgBC,YAAY,CAACF,KAAD,CAA5B;AACH,GAHD;;AAKA,sBACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACI;AAAA,8BACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,GAAG,EAAEjB,UAAxB;AAAoC,QAAA,EAAE,EAAC,aAAvC;AAAqD,QAAA,IAAI,EAAC,aAA1D;AAAwE,QAAA,WAAW,EAAC;AAApF;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,EAAE,EAAC,eAAxB;AAAwC,QAAA,IAAI,EAAC,eAA7C;AAA6D,QAAA,OAAO,EAAEK;AAAtE;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAMKJ,aAAa,CAACmB,GAAd,CAAkB,CAACC,IAAD,EAAOJ,KAAP,KAAiB;AAChC,YAAMK,QAAQ,GAAGD,IAAI,CAACE,UAAL,GAAkBF,IAAI,CAACE,UAAL,CAAgBC,KAAlC,GAA0C,+GAA3D;AACA,0BAAQ;AAAA,gCACI;AAAK,UAAA,GAAG,EAAEF,QAAV;AAAoB,UAAA,GAAG,EAAED,IAAI,CAACI;AAA9B;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,qBAAIJ,IAAI,CAACI,IAAT,OAAgBJ,IAAI,CAACK,IAArB,OAA4BL,IAAI,CAACM,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA,oBAAIN,IAAI,CAACO;AAAT;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAQ,UAAA,OAAO,EAAEtB,CAAC,IAAIU,SAAS,CAACV,CAAD,EAAIW,KAAJ,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAAR;AAKgB,KAPnB,CANL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH;;GA1CQnB,W;;KAAAA,W;AA4CT,eAAeA,WAAf","sourcesContent":["import { useState, useEffect, useContext, useRef } from 'react';\n\nimport ContextInformation from \"./ContextInformation\";\n\nfunction DeckBuilder() {\n    const context = useContext(ContextInformation);\n    const searchText = useRef(null);\n    const [ searchResults, setSearchResults ] = useState([]);\n\n    useEffect(() => {\n        console.log(searchResults);\n    }, [searchResults])\n\n    const submitSearch = (e) => {\n        e.preventDefault();\n        async function performSearch() {\n            return await fetch(`https://api.scryfall.com/cards/search?q=${searchText.current.value}`)\n                        .then(result => result.json())\n                        .then(json => setSearchResults(json.data));\n        }\n\n        performSearch();\n    }\n\n    const addToDeck = (e, index) => {\n        e.preventDefault();\n        context.setDeck(searchResult[index]);\n    }\n\n    return(\n        <div className=\"deck-builder\">\n            <form>\n                <input type=\"text\" ref={searchText} id=\"search-text\" name=\"search-text\" placeholder=\"Search Text\" />\n                <input type=\"submit\" id=\"search-button\" name=\"search-button\" onClick={submitSearch} />\n            </form>\n            {/* {context.deck.map(card => <p>{card.name} {card.type} x{card.count}</p>)} */}\n            {searchResults.map((card, index) => {\n                const imageUrl = card.image_uris ? card.image_uris.small : \"https://imgs.smoothradio.com/images/191589?crop=16_9&width=660&relax=1&signature=Rz93ikqcAz7BcX6SKiEC94zJnqo=\";\n                return (<div>\n                            <img src={imageUrl} alt={card.name} />\n                            <p>{card.name} {card.type} {card.cmc}</p>\n                            <p>{card.oracle_text}</p>\n                            <button onClick={e => addToDeck(e, index)}>+</button>\n                        </div>)})}\n        </div>\n    )\n}\n\nexport default DeckBuilder;"]},"metadata":{},"sourceType":"module"}